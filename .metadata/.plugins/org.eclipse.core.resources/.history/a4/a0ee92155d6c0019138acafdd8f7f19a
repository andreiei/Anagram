package no;

import java.io.*;
import java.util.*;
import java.nio.file.*;
import java.nio.charset.*;

public class Anagram{
  String filename;
  Map<String, List<String>> anagramMap;

  public Anagram(String filename){
    this.filename = filename;
    anagramMap = null;
  }

  public void initiateProgram(){
    List<String> anagramList = readFile();
    createAnagram(anagramList);
    printAnagrams(anagramMap);
  }

  /**
  * This method reads the provided file and adds the words to a List.
  * @return Returns an arrayList of words from the read file.
  */
  private ArrayList<String> readFile(){
	
    String directory = System.getProperty("user.dir");
    directory += "/src/main/resources/";
    Path path = FileSystems.getDefault().getPath(directory, filename);
    
    Charset charset = Charset.forName("UTF-8");

    ArrayList<String> textList = new ArrayList<String>();
    try(BufferedReader reader = Files.newBufferedReader(path, charset)){
      String line = null;
      while((line = reader.readLine()) != null){
        textList.add(line.trim());
      }

    }catch(IOException x){
      System.err.format("IOException: %s%n", x);
    }

    return textList;
  }

  /**
  * This method creates an anagram and inserts them into a hashmap.
  * @param lines A list of words
  */
  private void createAnagram(List<String> lines){
    anagramMap = new HashMap<String, List<String>>();

    for(String word : lines){
      String sortedWord = sortString(word).toLowerCase();

      if(!anagramMap.containsKey(sortedWord)){
        anagramMap.put(sortedWord, new ArrayList<String>());
      }
      System.out.println(sortedWord+" : "+word);
      anagramMap.get(sortedWord).add(word);
    }

    anagramMap.values().removeIf(value -> value.size()==1);
  }

  /**
  * This method sorts the characters of a string alphabetically
  * @param wordToSort String to sort
  * @return String Returns the sorted string
  */
  private String sortString(String wordToSort){
    char[] sortedChars = wordToSort.toCharArray();
    Arrays.sort(sortedChars);
    return new String(sortedChars);
  }

  /**
  * This method print all anagrams
  * @param anagramMap Hashmap consisting of the char-sorted word (key), and a
  * list of anagrams
  */
  public void printAnagrams(Map<String, List<String>> anagramMap){
    for(List<String> anagram : anagramMap.values()){
      printArrayList(anagram);
    }
  }

  /**
  * This method prints lines from an list
  * @param anagram String list
  */
  private void printArrayList(List<String> anagram){
    for(String s : anagram){
      System.out.print(s + " ");
    }
    System.out.println();
  }
  
  public Map<String, List<String>> getAnagramMap(){
	    return anagramMap;
	  }
}

