package andreiei.anagram;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.net.URL;
import java.io..Paths;

public class Anagram {
	String filename;
	Map<String, List<String>> anagramMap;

	public Anagram(String filename) {
		this.filename = filename;
		anagramMap = null;
	}

	public void initiateProgram() {
		List<String> anagramList = readFile();
		createAnagram(anagramList);
		printAnagrams(anagramMap);
	}

	/**
	 * This method reads the provided file and adds the words to a list.
	 * 
	 * @return Returns an arrayList of words from the read file.
	 */
	public ArrayList<String> readFile() {
		Path path = getFilePath();
		Charset charset = Charset.forName("UTF-8");

		ArrayList<String> textList = new ArrayList<String>();
		try (BufferedReader reader = Files.newBufferedReader(path, charset)) {
			String line = null;
			while ((line = reader.readLine()) != null) {
				textList.add(line.trim());
			}

		} catch (IOException x) {
			System.err.format("IOException: %s%n", x);
		}

		return textList;
	}
	
	/**
	 * This methods created a file path to the .txt directory
	 * @return A path to the txt directory
	 */
	public Path getFilePath() {
		String directory = System.getProperty("user.dir");
		directory += "/src/main/resources/txt";		
		Path path = FileSystems.getDefault().getPath(directory, filename);

		Path path = Paths.get("");
		System.out.println("REL PATH" + path.toAbsolutePath().toString());
		
		return path;
	}

	/**
	 * This method creates an anagram map and inserts the anagrams into a HashMap.
	 * 
	 * @param lines A list of words
	 */
	public void createAnagram(List<String> lines) {
		anagramMap = new HashMap<String, List<String>>();

		for (String word : lines) {
			String sortedWord = sortString(word.toLowerCase());

			if (!anagramMap.containsKey(sortedWord)) {
				anagramMap.put(sortedWord, new ArrayList<String>());
			}

			anagramMap.get(sortedWord).add(word.toLowerCase());
		}

		removeNonAnagramWords(anagramMap);
	}

	/**
	 * This method removes all entries whose lists are shorted in length than 1, i.e. non anagram values.
	 * @param anagramMap A map containing anagrams and non-anagrams.
	 */
	public void removeNonAnagramWords(Map<String, List<String>> anagramMap) {
		anagramMap.values().removeIf(value -> value.size() == 1);
	}

	/**
	 * This method sorts the characters of a string alphabetically
	 * 
	 * @param wordToSort String to sort
	 * @return String Returns the sorted string
	 */
	public String sortString(String wordToSort) {
		char[] sortedWordByChars = wordToSort.toCharArray();
		Arrays.sort(sortedWordByChars);
		return new String(sortedWordByChars);
	}

	/**
	 * This method prints all anagrams
	 * 
	 * @param anagramMap Hashmap consisting of the char-sorted word (key), and a
	 *                   list of anagrams
	 */
	private void printAnagrams(Map<String, List<String>> anagramMap) {
		System.out.println("==============================");
		System.out.printf("%20s", "Anagrams\n");
		System.out.println("==============================");

		for (List<String> anagram : anagramMap.values()) {
			printArrayList(anagram);
		}
	}

	/**
	 * This method prints lines from an list
	 * 
	 * @param anagram String list
	 */
	private void printArrayList(List<String> anagram) {
		for (String s : anagram) {
			System.out.print(s + " ");
		}
		System.out.println();
	}

	/**
	 * This method returns a HashMap anagram.
	 * 
	 * @return Returns the anagram
	 */
	public Map<String, List<String>> getAnagramMap() {
		return anagramMap;
	}
}
